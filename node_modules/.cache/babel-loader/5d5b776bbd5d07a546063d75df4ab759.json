{"ast":null,"code":"var _jsxFileName = \"/Users/itaru/fujisoft/clients/round1/dashbored/frontend/src/components/filter/dropdown/SelectStoreDropdown.js\",\n    _s = $RefreshSig$();\n\nimport config from '../../../config.json';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { useContext } from 'react';\nimport { ContextFilter } from '../../../components/filter/ContextFilter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SelectStoreDropdown() {\n  _s();\n\n  const {\n    valueInitialStore,\n    stateCurrentStore,\n    funcUpdateData,\n    stateVisible\n  } = useContext(ContextFilter);\n  const initialStore = valueInitialStore;\n  const setSelectedStore = stateCurrentStore[1];\n  const updateData = funcUpdateData;\n  const visible = stateVisible[0];\n  const defaultOption = initialStore;\n  const options = []; // Here handles the permission to display in the dropdown.\n  // HQ privillage shows all the stores in the dropdown.\n  // Other privillage shows only the store they belong.\n\n  if (initialStore === 'HQ') {\n    Object.entries(config.config_stores).map(([key, value]) => {\n      options.push({\n        value: key,\n        label: value\n      });\n    });\n  } else {\n    Object.entries(config.config_stores).map(([key, value]) => {\n      if (key.includes(initialStore)) {\n        options.push({\n          value: key,\n          label: value\n        });\n      }\n    });\n  }\n\n  const updateCurrentStore = async e => {\n    setSelectedStore(e.value);\n    await updateData();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      options: options,\n      value: defaultOption,\n      onChange: updateCurrentStore,\n      disabled: visible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SelectStoreDropdown, \"FJxJMpLUhB4N7q1ZvQZgXANgkK4=\");\n\n_c = SelectStoreDropdown;\nexport default SelectStoreDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectStoreDropdown\");","map":{"version":3,"sources":["/Users/itaru/fujisoft/clients/round1/dashbored/frontend/src/components/filter/dropdown/SelectStoreDropdown.js"],"names":["config","Dropdown","useContext","ContextFilter","SelectStoreDropdown","valueInitialStore","stateCurrentStore","funcUpdateData","stateVisible","initialStore","setSelectedStore","updateData","visible","defaultOption","options","Object","entries","config_stores","map","key","value","push","label","includes","updateCurrentStore","e"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,0BAAP;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,0CAA9B;;;AAGA,SAASC,mBAAT,GAA8B;AAAA;;AAE7B,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA,iBAArB;AAAwCC,IAAAA,cAAxC;AAAwDC,IAAAA;AAAxD,MAAyEN,UAAU,CAACC,aAAD,CAAzF;AACA,QAAMM,YAAY,GAAGJ,iBAArB;AACA,QAAMK,gBAAgB,GAAGJ,iBAAiB,CAAC,CAAD,CAA1C;AACA,QAAMK,UAAU,GAAGJ,cAAnB;AACA,QAAMK,OAAO,GAAGJ,YAAY,CAAC,CAAD,CAA5B;AACA,QAAMK,aAAa,GAAGJ,YAAtB;AACA,QAAMK,OAAO,GAAG,EAAhB,CAR6B,CAS7B;AACA;AACA;;AACA,MAAIL,YAAY,KAAK,IAArB,EAA0B;AACzBM,IAAAA,MAAM,CAACC,OAAP,CAAehB,MAAM,CAACiB,aAAtB,EAAqCC,GAArC,CAAyC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC1DN,MAAAA,OAAO,CAACO,IAAR,CAAa;AAACD,QAAAA,KAAK,EAAED,GAAR;AAAaG,QAAAA,KAAK,EAAEF;AAApB,OAAb;AACA,KAFD;AAGA,GAJD,MAKI;AACHL,IAAAA,MAAM,CAACC,OAAP,CAAehB,MAAM,CAACiB,aAAtB,EAAqCC,GAArC,CAAyC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC1D,UAAID,GAAG,CAACI,QAAJ,CAAad,YAAb,CAAJ,EAA+B;AAC9BK,QAAAA,OAAO,CAACO,IAAR,CAAa;AAACD,UAAAA,KAAK,EAAED,GAAR;AAAaG,UAAAA,KAAK,EAAEF;AAApB,SAAb;AACA;AACD,KAJD;AAKA;;AAED,QAAMI,kBAAkB,GAAG,MAAOC,CAAP,IAAa;AACvCf,IAAAA,gBAAgB,CAACe,CAAC,CAACL,KAAH,CAAhB;AACG,UAAMT,UAAU,EAAhB;AACH,GAHD;;AAKA,sBACC;AAAA,2BACC,QAAC,QAAD;AAAU,MAAA,OAAO,EAAGG,OAApB;AAA8B,MAAA,KAAK,EAAGD,aAAtC;AAAsD,MAAA,QAAQ,EAAGW,kBAAjE;AAAsF,MAAA,QAAQ,EAAGZ;AAAjG;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GAnCQR,mB;;KAAAA,mB;AAqCT,eAAeA,mBAAf","sourcesContent":["import config from '../../../config.json';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { useContext } from 'react';\nimport { ContextFilter } from '../../../components/filter/ContextFilter';\n\n\nfunction SelectStoreDropdown(){\n\n\tconst { valueInitialStore, stateCurrentStore, funcUpdateData, stateVisible } = useContext(ContextFilter);\n\tconst initialStore = valueInitialStore;\n\tconst setSelectedStore = stateCurrentStore[1];\n\tconst updateData = funcUpdateData;\n\tconst visible = stateVisible[0];\n\tconst defaultOption = initialStore;\n\tconst options = [];\n\t// Here handles the permission to display in the dropdown.\n\t// HQ privillage shows all the stores in the dropdown.\n\t// Other privillage shows only the store they belong.\n\tif (initialStore === 'HQ'){\n\t\tObject.entries(config.config_stores).map(([key, value]) => {\n\t\t\toptions.push({value: key, label: value});\n\t\t});\n\t}\n\telse{\n\t\tObject.entries(config.config_stores).map(([key, value]) => {\n\t\t\tif (key.includes(initialStore)){\n\t\t\t\toptions.push({value: key, label: value});\t\n\t\t\t}\n\t\t});\n\t}\n\t\n\tconst updateCurrentStore = async (e) => {\n\t\tsetSelectedStore(e.value);\n\t    await updateData();\t\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<Dropdown options={ options } value={ defaultOption } onChange={ updateCurrentStore } disabled={ visible } />\n\t\t</div>\n\t);\n}\n\nexport default SelectStoreDropdown;\n"]},"metadata":{},"sourceType":"module"}