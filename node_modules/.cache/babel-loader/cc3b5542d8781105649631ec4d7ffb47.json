{"ast":null,"code":"var _jsxFileName = \"/Users/itaru/fujisoft/clients/round1/dashbored/frontend/src/components/filter/dropdown/SelectStoreDropdown.js\",\n    _s = $RefreshSig$();\n\nimport config from '../../../config.json';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { useState, useContext } from 'react';\nimport { ContextFilter } from '../../../components/filter/ContextFilter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SelectStoreDropdown() {\n  _s();\n\n  const {\n    valueInitialStore,\n    statusCurrentStore\n  } = useContext(ContextFilter);\n  const initialStore = valueInitialStore;\n  const [currentStore, setNewSelectedStore] = statusCurrentStore;\n  const defaultOption = initialStore;\n  const options = []; // Here handles the permission to display in the dropdown.\n  // HQ privillage shows all the stores in the dropdown.\n  // Other privillage shows only the store they belong.\n\n  if (initialStore === 'HQ') {\n    Object.entries(config.config_stores).map(([key, value]) => {\n      options.push({\n        value: key,\n        label: value\n      });\n    });\n  } else {\n    Object.entries(config.config_stores).map(([key, value]) => {\n      if (key.includes(defaultStore)) {\n        options.push({\n          value: key,\n          label: value\n        });\n      }\n    });\n  }\n\n  const handleSelect = e => {\n    setNewSelectedStore(e.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      options: options,\n      value: defaultOption,\n      onChange: handleSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SelectStoreDropdown, \"AoG0iYCemdyWyinyzKWTLkBv7j8=\");\n\n_c = SelectStoreDropdown;\nexport default SelectStoreDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectStoreDropdown\");","map":{"version":3,"sources":["/Users/itaru/fujisoft/clients/round1/dashbored/frontend/src/components/filter/dropdown/SelectStoreDropdown.js"],"names":["config","Dropdown","useState","useContext","ContextFilter","SelectStoreDropdown","valueInitialStore","statusCurrentStore","initialStore","currentStore","setNewSelectedStore","defaultOption","options","Object","entries","config_stores","map","key","value","push","label","includes","defaultStore","handleSelect","e"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,0BAAP;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,aAAT,QAA8B,0CAA9B;;;AAGA,SAASC,mBAAT,GAA8B;AAAA;;AAE7B,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAA4CJ,UAAU,CAACC,aAAD,CAA5D;AACA,QAAMI,YAAY,GAAGF,iBAArB;AACA,QAAM,CAAEG,YAAF,EAAgBC,mBAAhB,IAAwCH,kBAA9C;AACA,QAAMI,aAAa,GAAGH,YAAtB;AACA,QAAMI,OAAO,GAAG,EAAhB,CAN6B,CAO7B;AACA;AACA;;AACA,MAAIJ,YAAY,KAAK,IAArB,EAA0B;AACzBK,IAAAA,MAAM,CAACC,OAAP,CAAed,MAAM,CAACe,aAAtB,EAAqCC,GAArC,CAAyC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC1DN,MAAAA,OAAO,CAACO,IAAR,CAAa;AAACD,QAAAA,KAAK,EAAED,GAAR;AAAaG,QAAAA,KAAK,EAAEF;AAApB,OAAb;AACA,KAFD;AAGA,GAJD,MAKI;AACHL,IAAAA,MAAM,CAACC,OAAP,CAAed,MAAM,CAACe,aAAtB,EAAqCC,GAArC,CAAyC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC1D,UAAID,GAAG,CAACI,QAAJ,CAAaC,YAAb,CAAJ,EAA+B;AAC9BV,QAAAA,OAAO,CAACO,IAAR,CAAa;AAACD,UAAAA,KAAK,EAAED,GAAR;AAAaG,UAAAA,KAAK,EAAEF;AAApB,SAAb;AACA;AACD,KAJD;AAKA;;AAED,QAAMK,YAAY,GAAIC,CAAD,IAAO;AAC3Bd,IAAAA,mBAAmB,CAACc,CAAC,CAACN,KAAH,CAAnB;AACA,GAFD;;AAIA,sBACC;AAAA,2BACC,QAAC,QAAD;AAAU,MAAA,OAAO,EAAEN,OAAnB;AAA4B,MAAA,KAAK,EAAED,aAAnC;AAAkD,MAAA,QAAQ,EAAEY;AAA5D;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAMA;;GAjCQlB,mB;;KAAAA,mB;AAmCT,eAAeA,mBAAf","sourcesContent":["import config from '../../../config.json';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { useState, useContext } from 'react';\nimport { ContextFilter } from '../../../components/filter/ContextFilter';\n\n\nfunction SelectStoreDropdown(){\n\n\tconst { valueInitialStore, statusCurrentStore } = useContext(ContextFilter);\n\tconst initialStore = valueInitialStore;\n\tconst [ currentStore, setNewSelectedStore ] = statusCurrentStore;\n\tconst defaultOption = initialStore;\n\tconst options = [];\n\t// Here handles the permission to display in the dropdown.\n\t// HQ privillage shows all the stores in the dropdown.\n\t// Other privillage shows only the store they belong.\n\tif (initialStore === 'HQ'){\n\t\tObject.entries(config.config_stores).map(([key, value]) => {\n\t\t\toptions.push({value: key, label: value});\n\t\t});\n\t}\n\telse{\n\t\tObject.entries(config.config_stores).map(([key, value]) => {\n\t\t\tif (key.includes(defaultStore)){\n\t\t\t\toptions.push({value: key, label: value});\t\n\t\t\t}\n\t\t});\n\t}\n\t\n\tconst handleSelect = (e) => {\n\t\tsetNewSelectedStore(e.value);\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<Dropdown options={options} value={defaultOption} onChange={handleSelect} />\n\t\n\t\t</div>\n\t);\n}\n\nexport default SelectStoreDropdown;\n"]},"metadata":{},"sourceType":"module"}